// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String    @id
    email     String    @unique
    createdAt DateTime  @default(now())
    Profile   Profile   @relation(fields: [profileId], references: [id])
    profileId String    @unique
    Wedding   Wedding[]
}

model Profile {
    id       String  @id @default(uuid())
    fullName String?
    picture  String?
    userId   String  @unique
    User     User?
}

model Wedding {
    id          String   @id @default(uuid())
    createdAt   DateTime @default(now())
    date        DateTime
    title       String
    description String
    groomName   String
    brideName   String
    Event       Event[]
    Guest       Guest[]
    venueId     String?  @unique
    Venue       Venue?   @relation(fields: [venueId], references: [id])
    User        User     @relation(fields: [userId], references: [id])
    userId      String
}

model Event {
    id          String   @id @default(uuid())
    name        String
    date        DateTime
    description String
    Media       Media[]
    Wedding     Wedding? @relation(fields: [weddingId], references: [id])
    weddingId   String?
}

model Venue {
    id      String   @id @default(uuid())
    name    String
    address String
    photos  String[]
    Wedding Wedding?
}

enum InvitationStatus {
    NOT_SENT
    SENT
}

model Guest {
    id             String           @id @default(uuid())
    createdAt      DateTime         @default(now())
    name           String
    email          String
    additionalInfo String?
    status         InvitationStatus @default(NOT_SENT)
    sentAt         DateTime?
    Wedding        Wedding?         @relation(fields: [weddingId], references: [id])
    weddingId      String?
}

model Media {
    id         String   @id @default(uuid())
    uploadedAt DateTime @default(now())
    type       String
    publicId   String
    eventId    String
    Event      Event    @relation(fields: [eventId], references: [id])
}
